** We want to keep data separate from the training done in the model. For this reason, we use Dataset to store
the samples, and use DataLoader to wrap an iterable around the Dataset to enable the model's access.

** Really important: dataloader will cycle through randomly chosen batches from the whole dataset. So we don't have
                     to create a new batch for each epoch. 
___________________________________________________________________________________________________________________

Built in datasets: these datasets have built-in functions specific to handling them, making them easy to start with.
-----------------

Image datasets: https://pytorch.org/vision/stable/datasets.html

Text datasets: https://pytorch.org/text/stable/datasets.html

Audio datasets: https://pytorch.org/audio/stable/datasets.html

___________________________________________________________________________________________________________________

Eg: Fashion-Mnist


root: path where train/test data is stored
train: specified train or test dataset
download=True: downloads data if it's not available in root
transform and target_transform: specify the feature and label transformations



import torch
from torch.utils.data import Dataset
from torchvision import datasets
from torchvision.transforms import ToTensor
import matplotlib.pyplot as plt

training_data = datasets.FashionMNIST(
    root="data",
    train=True,
    download=True,
    transform=ToTensor()
)

test_data = datasets.FashionMNIST(
    root="data",
    train=False,
    download=True,
    transform=ToTensor()
)

labels_map = {   # you can find this map in the github README file
    0: "T-Shirt",
    1: "Trouser",
    2: "Pullover",
    3: "Dress",
    4: "Coat",
    5: "Sandal",
    6: "Shirt",
    7: "Sneaker",
    8: "Bag",
    9: "Ankle Boot",
}

figure = plt.figure(figsize=(8,8))
cols, rows = 5, 5
for i in range(1, cols * rows + 1):
    sample_idx = torch.randint( len(training_data), size=(1,) ).item()  #just rand sample int
    img, label = training_data[sample_idx]
    figure.add_subplot(rows, cols, i)
    plt.title(labels_map[label])
    plt.axis("off")
    plt.imshow(img.squeeze(), cmap="gray")
plt.show()